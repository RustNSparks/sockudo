name: Docker - Build and Push Images

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'Dockerfile*'
      - 'docker-compose*.yml'
  
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'Dockerfile*'
  
  schedule:
    # Rebuild weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  
  workflow_dispatch:
    inputs:
      push_latest:
        description: 'Push as latest tag'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  # =============================================================================
  # Prepare Build Information
  # =============================================================================
  prepare:
    name: Prepare Build
    runs-on: ubuntu-24.04
    outputs:
      lowercase_image_name: ${{ steps.repo.outputs.name }}
      should_push_latest: ${{ steps.latest.outputs.should_push }}
      branch_tag: ${{ steps.branch.outputs.tag }}
    
    steps:
      - name: Get repository name in lowercase
        id: repo
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Determine latest tag push
        id: latest
        run: |
          if [ "${{ github.event.inputs.push_latest }}" = "true" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "should_push=true" >> $GITHUB_OUTPUT
          else
            echo "should_push=false" >> $GITHUB_OUTPUT
          fi

      - name: Get branch tag
        id: branch
        run: echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT

  # =============================================================================
  # Build Docker Images by Platform
  # =============================================================================
  build-docker:
    name: Build Docker ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.runner }}
    needs: prepare
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: amd64
            arch: linux/amd64
            runner: ubuntu-24.04
          - name: arm64
            arch: linux/arm64
            runner: ubuntu-24.04-arm
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        continue-on-error: true
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform.arch }}
          push: true
          provenance: false
          tags: |
            ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.branch_tag }}-${{ matrix.platform.name }}-temp
            sockudo/sockudo:${{ needs.prepare.outputs.branch_tag }}-${{ matrix.platform.name }}-temp
          cache-from: type=gha,scope=docker-${{ matrix.platform.name }}
          cache-to: type=gha,mode=max,scope=docker-${{ matrix.platform.name }}

  # =============================================================================
  # Create Multi-Platform Manifests
  # =============================================================================
  docker-manifest:
    name: Create Multi-Platform Manifests
    runs-on: ubuntu-24.04
    needs: [prepare, build-docker]
    
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        continue-on-error: true
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push GHCR manifest
        run: |
          # Create branch manifest
          docker manifest create \
            ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.branch_tag }} \
            ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.branch_tag }}-amd64-temp \
            ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.branch_tag }}-arm64-temp
          docker manifest push ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.branch_tag }}
          
          # Create latest manifest if requested
          if [ "${{ needs.prepare.outputs.should_push_latest }}" = "true" ]; then
            docker manifest create \
              ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:latest \
              ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.branch_tag }}-amd64-temp \
              ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.branch_tag }}-arm64-temp
            docker manifest push ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:latest
          fi

      - name: Create and push Docker Hub manifest
        continue-on-error: true
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          # Create branch manifest
          docker manifest create \
            sockudo/sockudo:${{ needs.prepare.outputs.branch_tag }} \
            sockudo/sockudo:${{ needs.prepare.outputs.branch_tag }}-amd64-temp \
            sockudo/sockudo:${{ needs.prepare.outputs.branch_tag }}-arm64-temp
          docker manifest push sockudo/sockudo:${{ needs.prepare.outputs.branch_tag }}
          
          # Create latest manifest if requested
          if [ "${{ needs.prepare.outputs.should_push_latest }}" = "true" ]; then
            docker manifest create \
              sockudo/sockudo:latest \
              sockudo/sockudo:${{ needs.prepare.outputs.branch_tag }}-amd64-temp \
              sockudo/sockudo:${{ needs.prepare.outputs.branch_tag }}-arm64-temp
            docker manifest push sockudo/sockudo:latest
          fi
          
          # Clean up temporary platform-specific tags
          echo "Cleaning up temporary tags..."
          TOKEN=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d '{"username": "'${DOCKERHUB_USERNAME}'", "password": "'${DOCKERHUB_TOKEN}'"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          if [ -n "$TOKEN" ] && [ "$TOKEN" != "null" ]; then
            echo "Deleting temp tag: ${{ needs.prepare.outputs.branch_tag }}-amd64-temp"
            curl -s -o /dev/null -X DELETE \
              -H "Authorization: Bearer ${TOKEN}" \
              "https://hub.docker.com/v2/repositories/sockudo/sockudo/tags/${{ needs.prepare.outputs.branch_tag }}-amd64-temp/" || true
            
            echo "Deleting temp tag: ${{ needs.prepare.outputs.branch_tag }}-arm64-temp"  
            curl -s -o /dev/null -X DELETE \
              -H "Authorization: Bearer ${TOKEN}" \
              "https://hub.docker.com/v2/repositories/sockudo/sockudo/tags/${{ needs.prepare.outputs.branch_tag }}-arm64-temp/" || true
          else
            echo "Failed to authenticate for cleanup, temp tags will remain"
          fi

  # =============================================================================
  # Build Test Image (for PR and testing)
  # =============================================================================
  build-test:
    name: Build Test Image
    runs-on: ubuntu-24.04
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: sockudo:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================================
  # Test Docker Image
  # =============================================================================
  test:
    name: Test Docker Image
    runs-on: ubuntu-24.04
    needs: [build-test, docker-manifest]
    if: always() && (needs.build-test.result == 'success' || needs.docker-manifest.result == 'success')
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build or pull test image
        run: |
          if [ \"${{ github.event_name }}\" = \"pull_request\" ]; then
            # For PR: build locally
            docker build -t sockudo:test .
          else
            # For push: pull the built image
            docker pull ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.branch_tag }}
            docker tag ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.branch_tag }} sockudo:test
          fi

      - name: Test basic functionality
        run: |
          echo "Testing Docker image functionality..."
          
          # Start container
          docker run -d --name sockudo-test \
            --network host \
            -e RUST_LOG=info \
            -e DATABASE_REDIS_HOST=localhost \
            -e DATABASE_REDIS_PORT=6379 \
            -e SOCKUDO_DEFAULT_APP_ENABLED=true \
            sockudo:test
          
          # Wait for startup
          sleep 15
          
          # Test health endpoint
          if curl -f http://localhost:6001/up/demo-app; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            docker logs sockudo-test
            exit 1
          fi
          
          # Test metrics endpoint
          if curl -f http://localhost:9601/metrics > /dev/null; then
            echo "✅ Metrics endpoint accessible"
          else
            echo "❌ Metrics endpoint failed"
            docker logs sockudo-test
            exit 1
          fi
          
          echo "✅ All tests passed!"

      - name: Cleanup
        if: always()
        run: |
          docker stop sockudo-test || true
          docker rm sockudo-test || true

  # =============================================================================
  # Security Scan
  # =============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-24.04
    needs: [prepare, docker-manifest]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Get repository name in lowercase
        id: repo
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.branch_tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'