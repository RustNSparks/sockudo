name: Manual Build - Cross Platform Artifacts

on:
  workflow_dispatch:
    inputs:
      build_linux_x64:
        description: 'Build Linux x86_64 (GNU)'
        required: false
        type: boolean
        default: false
      build_macos_x64:
        description: 'Build macOS x86_64 (Intel)'
        required: false
        type: boolean
        default: false
      build_macos_arm64:
        description: 'Build macOS ARM64 (Apple Silicon)'
        required: false
        type: boolean
        default: false
      build_windows_x64:
        description: 'Build Windows x86_64'
        required: false
        type: boolean
        default: false
      build_docker:
        description: 'Build Docker image'
        required: false
        type: boolean
        default: false
      upload_to_pr:
        description: 'Upload artifacts to PR (if applicable)'
        required: false
        type: boolean
        default: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # =============================================================================
  # Build Matrix Setup
  # =============================================================================
  setup:
    name: Setup Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_builds: ${{ steps.set-matrix.outputs.has_builds }}
    steps:
      - name: Setup matrix
        id: set-matrix
        run: |
          matrix_items='[]'
          
          if [[ "${{ inputs.build_linux_x64 }}" == "true" ]]; then
            matrix_items=$(echo "$matrix_items" | jq '. += [{"os": "ubuntu-latest", "target": "x86_64-unknown-linux-gnu", "name": "linux-x64", "binary_name": "sockudo"}]')
          fi
          
          if [[ "${{ inputs.build_macos_x64 }}" == "true" ]]; then
            matrix_items=$(echo "$matrix_items" | jq '. += [{"os": "macos-13", "target": "x86_64-apple-darwin", "name": "macos-x64", "binary_name": "sockudo"}]')
          fi
          
          if [[ "${{ inputs.build_macos_arm64 }}" == "true" ]]; then
            matrix_items=$(echo "$matrix_items" | jq '. += [{"os": "macos-latest", "target": "aarch64-apple-darwin", "name": "macos-arm64", "binary_name": "sockudo"}]')
          fi
          
          if [[ "${{ inputs.build_windows_x64 }}" == "true" ]]; then
            matrix_items=$(echo "$matrix_items" | jq '. += [{"os": "windows-latest", "target": "x86_64-pc-windows-msvc", "name": "windows-x64", "binary_name": "sockudo.exe"}]')
          fi
          
          {
            echo "matrix<<EOF"
            echo "{\"include\":$matrix_items}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          
          if [[ "$matrix_items" != "[]" ]]; then
            echo "has_builds=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_builds=false" >> "$GITHUB_OUTPUT"
          fi

  # =============================================================================
  # Build Binaries
  # =============================================================================
  build:
    name: Build ${{ matrix.name }}
    needs: setup
    if: needs.setup.outputs.has_builds == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libpq-dev libmariadb-dev cmake
          sudo apt-get install -y libssl-dev curl

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.target }}-
            ${{ runner.os }}-cargo-build-

      - name: Build release binary
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Strip and prepare artifact
        shell: bash
        run: |
          SOURCE_PATH="./target/${{ matrix.target }}/release/${{ matrix.binary_name }}"
          
          # Strip binary on Unix systems
          if [[ "$RUNNER_OS" == "Linux" || "$RUNNER_OS" == "macOS" ]]; then
            strip "${SOURCE_PATH}" || echo "Strip failed, continuing..."
          fi
          
          # Create artifacts directory and copy binary
          mkdir -p artifacts
          cp "${SOURCE_PATH}" "artifacts/sockudo-${{ matrix.name }}$([[ $RUNNER_OS == 'Windows' ]] && echo '.exe' || echo '')"
          
          # Make executable on Unix
          if [[ "$RUNNER_OS" != "Windows" ]]; then
            chmod +x "artifacts/sockudo-${{ matrix.name }}"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sockudo-${{ matrix.name }}
          path: artifacts/*
          retention-days: 30

  # =============================================================================
  # Docker Build
  # =============================================================================
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    if: inputs.build_docker
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate Docker metadata
        id: meta
        run: |
          if [[ "$GITHUB_REF_NAME" =~ ^[0-9]+/merge$ ]]; then
            # PR merge ref format
            PR_NUM=$(echo "$GITHUB_REF_NAME" | cut -d'/' -f1)
            echo "tags=sockudo:pr-${PR_NUM}" >> $GITHUB_OUTPUT
            echo "archive_name=sockudo-docker-pr-${PR_NUM}" >> $GITHUB_OUTPUT
          else
            # Branch or manual trigger
            SAFE_BRANCH=$(echo "$GITHUB_REF_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            echo "tags=sockudo:${SAFE_BRANCH}-${TIMESTAMP}" >> $GITHUB_OUTPUT
            echo "archive_name=sockudo-docker-${SAFE_BRANCH}-${TIMESTAMP}" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d --name sockudo-test -p 6001:6001 -e RUST_LOG=info ${{ steps.meta.outputs.tags }}
          sleep 10
          curl -f http://localhost:6001/up/demo-app || exit 1
          docker stop sockudo-test

      - name: Save Docker image
        run: |
          docker save ${{ steps.meta.outputs.tags }} | gzip > ${{ steps.meta.outputs.archive_name }}.tar.gz

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.meta.outputs.archive_name }}
          path: ${{ steps.meta.outputs.archive_name }}.tar.gz
          retention-days: 30

  # =============================================================================
  # Post to PR
  # =============================================================================
  post-to-pr:
    name: Post Results to PR
    runs-on: ubuntu-latest
    needs: [setup, build, docker]
    permissions:
      contents: read
      pull-requests: write
      issues: write
    if: |
      always() && 
      inputs.upload_to_pr &&
      (needs.build.result == 'success' || needs.docker.result == 'success')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find PR number
        id: pr
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else
            # Try to find PR for current branch
            PR_NUMBER=$(gh pr list --head ${{ github.ref_name }} --json number --jq '.[0].number' || echo "")
            echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Post comment to PR
        if: steps.pr.outputs.number != ''
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = [];
            
            if ('${{ inputs.build_linux_x64 }}' === 'true') artifacts.push('Linux x64');
            if ('${{ inputs.build_macos_x64 }}' === 'true') artifacts.push('macOS x64');
            if ('${{ inputs.build_macos_arm64 }}' === 'true') artifacts.push('macOS ARM64');
            if ('${{ inputs.build_windows_x64 }}' === 'true') artifacts.push('Windows x64');
            if ('${{ inputs.build_docker }}' === 'true') artifacts.push('Docker image');
            
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            const body = `## ðŸ”¨ Manual Build Completed
            
            **Built artifacts:** ${artifacts.join(', ')}
            
            **Workflow run:** [View results](${runUrl})
            
            Artifacts are available for download from the [workflow run page](${runUrl}) for 30 days.
            
            ---
            *Triggered by @${context.actor} via workflow_dispatch*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr.outputs.number }},
              body: body
            });