name: Integration Tests

on:
  push:
    branches: [ main, master, develop, beta ]
  pull_request:
    branches: [ main, master, develop, beta ]

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # =============================================================================
  # Integration Tests
  # =============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install Rust toolchain (for caching)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Integration Tests
        run: make test-integration
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            test/integration/test-results.json
            test/integration/coverage/
          retention-days: 30

      - name: Generate test summary
        if: always()
        run: |
          echo "# Integration Test Results" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "test/integration/test-results.json" ]; then
            PASSING=$(jq -r '.stats.passes // 0' test/integration/test-results.json)
            FAILING=$(jq -r '.stats.failures // 0' test/integration/test-results.json)
            TOTAL=$(jq -r '.stats.tests // 0' test/integration/test-results.json)
            
            echo "## Summary" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **$PASSING** tests passed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ **$FAILING** tests failed" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 **$TOTAL** total tests" >> $GITHUB_STEP_SUMMARY
            
            if [ "$FAILING" -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "## Failed Tests" >> $GITHUB_STEP_SUMMARY
              jq -r '.failures[]? | "- **" + .title + "**: " + .err.message' test/integration/test-results.json >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ Test results file not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let testSummary = "## 🧪 Integration Test Results\n\n";
            
            try {
              if (fs.existsSync('test/integration/test-results.json')) {
                const results = JSON.parse(fs.readFileSync('test/integration/test-results.json', 'utf8'));
                const passing = results.stats.passes || 0;
                const failing = results.stats.failures || 0;
                const total = results.stats.tests || 0;
                
                if (failing === 0) {
                  testSummary += `✅ **All tests passed!** (${passing}/${total})\n\n`;
                  testSummary += "🎉 Ready to merge - all integration tests are passing.\n";
                } else {
                  testSummary += `❌ **${failing} tests failed** (${passing}/${total} passed)\n\n`;
                  testSummary += "### Failed Tests:\n";
                  
                  if (results.failures) {
                    results.failures.forEach(failure => {
                      testSummary += `- **${failure.title}**: ${failure.err.message}\n`;
                    });
                  }
                  
                  testSummary += "\n⚠️ Please fix failing tests before merging.\n";
                }
                
                testSummary += "\n### Test Coverage:\n";
                testSummary += "- Connection Tests\n";
                testSummary += "- Channel Subscription Tests\n";
                testSummary += "- Authentication Tests\n";
                testSummary += "- Event Broadcasting Tests\n";
                testSummary += "- Quota and Limits Tests\n";
                
              } else {
                testSummary += "⚠️ Test results not available.\n";
              }
            } catch (error) {
              testSummary += `❌ Error reading test results: ${error.message}\n`;
            }
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Integration Test Results')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: testSummary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: testSummary
              });
            }

  # =============================================================================
  # Combined Status Check
  # =============================================================================
  integration-test-status:
    name: Integration Test Status
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always()
    
    steps:
      - name: Check integration test results
        run: |
          if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "✅ Integration tests passed"
            exit 0
          else
            echo "❌ Integration tests failed"
            exit 1
          fi

  # =============================================================================
  # Performance Benchmarks (Optional)
  # =============================================================================
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [integration-tests]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run performance benchmarks
        run: |
          echo "🚀 Running performance benchmarks..."
          make test-integration-coverage
        continue-on-error: true
        
      - name: Comment with performance results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const performanceComment = `## ⚡ Performance Benchmarks
            
            Performance tests completed for this PR.
            
            ### Metrics Tested:
            - WebSocket connection latency
            - Event delivery speed  
            - Concurrent connection handling
            - Message throughput
            
            > 📊 Detailed performance metrics available in the action logs.
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: performanceComment
            });