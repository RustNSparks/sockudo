name: Release - Build and Publish

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string
      docker_tag_suffix:
        description: 'Docker tag suffix (e.g., latest, test, dev)'
        required: false
        type: string
        default: 'latest'

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io

jobs:
  # =============================================================================
  # Prepare Release Information
  # =============================================================================
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      prerelease: ${{ steps.version.outputs.prerelease }}
      lowercase_image_name: ${{ steps.lowercase_repo.outputs.name }} # New output for lowercased repo name
      docker_tag_suffix: ${{ steps.docker_suffix.outputs.suffix }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version information
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          
          VERSION="${TAG#v}"
          PRERELEASE="false"
          if [[ "$TAG" =~ (alpha|beta|rc) ]]; then
            PRERELEASE="true"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "prerelease=${PRERELEASE}" >> $GITHUB_OUTPUT

      - name: Verify version matches Cargo.toml
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          
          # Only verify version for tags in vX.X.X or vX.X.X-suffix format
          if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            TAG_VERSION="${{ steps.version.outputs.version }}"
            CARGO_VERSION=$(grep "^version" Cargo.toml | head -1 | cut -d'"' -f2)
            
            echo "Git tag version: ${TAG_VERSION}"
            echo "Cargo.toml version: ${CARGO_VERSION}"
            
            if [ "${TAG_VERSION}" != "${CARGO_VERSION}" ]; then
              echo "::error::Version mismatch! Git tag is v${TAG_VERSION} but Cargo.toml has version ${CARGO_VERSION}"
              echo "Please ensure the Git tag matches the version in Cargo.toml"
              exit 1
            fi
            
            echo "âœ… Version verification passed: ${TAG_VERSION}"
          else
            echo "Skipping version verification for tag: ${TAG} (not in vX.X.X format)"
          fi

      - name: Get repository name in lowercase
        id: lowercase_repo # Step to convert repo name to lowercase
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Get Docker tag suffix
        id: docker_suffix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.docker_tag_suffix }}" ]; then
            SUFFIX="${{ github.event.inputs.docker_tag_suffix }}"
          else
            SUFFIX="latest"
          fi
          echo "suffix=${SUFFIX}" >> $GITHUB_OUTPUT

  # =============================================================================
  # Build Cross-Platform Binaries
  # =============================================================================
  build-linux-x64-musl:
    needs: prepare
    uses: ./.github/workflows/build-binary.yml
    with:
      target_name: Linux x86_64 (musl)
      target_triple: x86_64-unknown-linux-musl
      runner_os: ubuntu-latest
      archive_ext: tgz
      binary_name: sockudo
      version: ${{ needs.prepare.outputs.version }}

  build-linux-x64-gnu:
    needs: prepare
    uses: ./.github/workflows/build-binary.yml
    with:
      target_name: Linux x86_64 (GNU)
      target_triple: x86_64-unknown-linux-gnu
      runner_os: ubuntu-latest
      archive_ext: tar.gz
      binary_name: sockudo
      version: ${{ needs.prepare.outputs.version }}

  build-linux-arm64-gnu:
    needs: prepare
    uses: ./.github/workflows/build-binary.yml
    with:
      target_name: Linux ARM64 (GNU)
      target_triple: aarch64-unknown-linux-gnu
      runner_os: ubuntu-24.04-arm
      archive_ext: tar.gz
      binary_name: sockudo
      version: ${{ needs.prepare.outputs.version }}

  build-linux-arm64-musl:
    needs: prepare
    uses: ./.github/workflows/build-binary.yml
    with:
      target_name: Linux ARM64 (musl)
      target_triple: aarch64-unknown-linux-musl
      runner_os: ubuntu-24.04-arm
      archive_ext: tgz
      binary_name: sockudo
      version: ${{ needs.prepare.outputs.version }}


  build-macos-x64:
    needs: prepare
    uses: ./.github/workflows/build-binary.yml
    with:
      target_name: macOS x86_64
      target_triple: x86_64-apple-darwin
      runner_os: macos-13
      archive_ext: tar.gz
      binary_name: sockudo
      version: ${{ needs.prepare.outputs.version }}

  build-macos-arm64:
    needs: prepare
    uses: ./.github/workflows/build-binary.yml
    with:
      target_name: macOS ARM64
      target_triple: aarch64-apple-darwin
      runner_os: macos-latest
      archive_ext: tar.gz
      binary_name: sockudo
      version: ${{ needs.prepare.outputs.version }}

  build-windows-x64:
    needs: prepare
    uses: ./.github/workflows/build-binary.yml
    with:
      target_name: Windows x86_64
      target_triple: x86_64-pc-windows-msvc
      runner_os: windows-latest
      archive_ext: zip
      binary_name: sockudo.exe
      version: ${{ needs.prepare.outputs.version }}

  # =============================================================================
  # Build and Push Docker Images
  # =============================================================================
  build-docker:
    name: Build Docker ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.runner }}
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: amd64
            arch: linux/amd64
            runner: ubuntu-latest
          - name: arm64
            arch: linux/arm64
            runner: ubuntu-24.04-arm
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        continue-on-error: true
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform.arch }}
          push: true
          provenance: false
          tags: |
            ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.version }}-${{ matrix.platform.name }}-temp
            sockudo/sockudo:${{ needs.prepare.outputs.version }}-${{ matrix.platform.name }}-temp
          cache-from: type=gha,scope=docker-${{ matrix.platform.name }}
          cache-to: type=gha,mode=max,scope=docker-${{ matrix.platform.name }}

  # =============================================================================
  # Create Multi-Platform Manifests
  # =============================================================================
  docker-manifest:
    name: Create Multi-Platform Manifests
    runs-on: ubuntu-latest
    needs: [prepare, build-docker]
    
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        continue-on-error: true
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push GHCR manifest
        run: |
          # Create version manifest
          docker manifest create \
            ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.version }} \
            ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.version }}-amd64-temp \
            ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.version }}-arm64-temp
          docker manifest push ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.version }}
          
          # Create suffix manifest
          docker manifest create \
            ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.docker_tag_suffix }} \
            ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.version }}-amd64-temp \
            ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.version }}-arm64-temp
          docker manifest push ${{ env.REGISTRY }}/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.docker_tag_suffix }}

      - name: Create and push Docker Hub manifest
        continue-on-error: true
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          # Create version manifest
          docker manifest create \
            sockudo/sockudo:${{ needs.prepare.outputs.version }} \
            sockudo/sockudo:${{ needs.prepare.outputs.version }}-amd64-temp \
            sockudo/sockudo:${{ needs.prepare.outputs.version }}-arm64-temp
          docker manifest push sockudo/sockudo:${{ needs.prepare.outputs.version }}
          
          # Create suffix manifest
          docker manifest create \
            sockudo/sockudo:${{ needs.prepare.outputs.docker_tag_suffix }} \
            sockudo/sockudo:${{ needs.prepare.outputs.version }}-amd64-temp \
            sockudo/sockudo:${{ needs.prepare.outputs.version }}-arm64-temp
          docker manifest push sockudo/sockudo:${{ needs.prepare.outputs.docker_tag_suffix }}
          
          # Clean up temporary platform-specific tags
          echo "Cleaning up temporary tags..."
          TOKEN=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d '{"username": "'${DOCKERHUB_USERNAME}'", "password": "'${DOCKERHUB_TOKEN}'"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          if [ -n "$TOKEN" ] && [ "$TOKEN" != "null" ]; then
            echo "Deleting temp tag: ${{ needs.prepare.outputs.version }}-amd64-temp"
            curl -s -o /dev/null -X DELETE \
              -H "Authorization: Bearer ${TOKEN}" \
              "https://hub.docker.com/v2/repositories/sockudo/sockudo/tags/${{ needs.prepare.outputs.version }}-amd64-temp/" || true
            
            echo "Deleting temp tag: ${{ needs.prepare.outputs.version }}-arm64-temp"  
            curl -s -o /dev/null -X DELETE \
              -H "Authorization: Bearer ${TOKEN}" \
              "https://hub.docker.com/v2/repositories/sockudo/sockudo/tags/${{ needs.prepare.outputs.version }}-arm64-temp/" || true
          else
            echo "Failed to authenticate for cleanup, temp tags will remain"
          fi

  # =============================================================================
  # Publish to Crates.io
  # =============================================================================
  publish-crates:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: [prepare, build-linux-x64-musl, build-linux-x64-gnu, build-linux-arm64-gnu, build-linux-arm64-musl, build-macos-x64, build-macos-arm64, build-windows-x64]
    if: needs.prepare.outputs.prerelease != 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libpq-dev libmariadb-dev cmake

      - name: Publish to crates.io
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        if: env.CRATES_IO_TOKEN != ''
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  # =============================================================================
  # Create GitHub Release (Final Step)
  # =============================================================================
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare, build-linux-x64-musl, build-linux-x64-gnu, build-linux-arm64-gnu, build-linux-arm64-musl, build-macos-x64, build-macos-arm64, build-windows-x64, docker-manifest, publish-crates]
    if: |
      always() && !cancelled() && 
      needs.build-linux-x64-musl.result == 'success' &&
      needs.build-linux-x64-gnu.result == 'success' &&
      needs.build-macos-x64.result == 'success' &&
      needs.build-macos-arm64.result == 'success' &&
      needs.build-windows-x64.result == 'success' &&
      needs.docker-manifest.result == 'success' &&
      (needs.publish-crates.result == 'success' || needs.publish-crates.result == 'skipped')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-artifacts
          pattern: sockudo-*
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: "Sockudo ${{ needs.prepare.outputs.tag }}"
          generate_release_notes: true
          body: |
            ## Installation
            
            ### Using cargo-binstall (Recommended)
            ```bash
            cargo binstall sockudo --version ${{ needs.prepare.outputs.version }}
            ```
            
            ### Using cargo
            ```bash
            cargo install sockudo --version ${{ needs.prepare.outputs.version }}
            ```
            
            ### Using Docker
            ```bash
            docker pull ghcr.io/${{ needs.prepare.outputs.lowercase_image_name }}:${{ needs.prepare.outputs.version }}
            docker pull sockudo/sockudo:${{ needs.prepare.outputs.version }}
            ```
            
            ### Direct Download
            Download the appropriate binary for your platform from the assets below.
            
            ## Platform Support
            - âœ… Linux x86_64 (GNU)
            - âœ… Linux x86_64 (musl)
            - âœ… Linux ARM64 (GNU)
            - âœ… Linux ARM64 (musl)
            - âœ… macOS x86_64 (Intel)
            - âœ… macOS ARM64 (Apple Silicon)
            - âœ… Windows x86_64
            - âœ… Docker linux/amd64
            - âœ… Docker linux/arm64
          files: ./release-artifacts/*
          draft: false
          prerelease: ${{ needs.prepare.outputs.prerelease }}