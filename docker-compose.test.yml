# =============================================================================
# Sockudo Lightweight Test Services
# =============================================================================

name: sockudo-test

services:
  # Single Redis instance
  redis-test:
    image: redis:7-alpine
    ports:
      - "16379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 5s
    networks:
      - sockudo-network
    mem_limit: 128m
    cpus: '0.5'

  # Minimal Redis Cluster (3 nodes only - minimum for cluster)
  redis-cluster-setup:
    image: redis:7-alpine
    depends_on:
      redis-node-1:
        condition: service_healthy
      redis-node-2:
        condition: service_healthy
      redis-node-3:
        condition: service_healthy
    networks:
      - sockudo-network
    command: sh -c "sleep 5 && redis-cli --cluster create redis-node-1:6379 redis-node-2:6379 redis-node-3:6379 --cluster-replicas 0 --cluster-yes"
    mem_limit: 64m

  redis-node-1:
    image: redis:7-alpine
    ports:
      - "17001:6379"
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - sockudo-network
    mem_limit: 128m
    cpus: '0.25'

  redis-node-2:
    image: redis:7-alpine
    ports:
      - "17002:6379"
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - sockudo-network
    mem_limit: 128m
    cpus: '0.25'

  redis-node-3:
    image: redis:7-alpine
    ports:
      - "17003:6379"
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - sockudo-network
    mem_limit: 128m
    cpus: '0.25'

  # Minimal NATS Cluster (2 nodes)
  nats-1:
    image: nats:alpine
    ports:
      - "14222:4222"
      - "18222:8222"  # HTTP monitoring
    command: |
      --name nats-1
      --cluster_name NATS
      --cluster nats://0.0.0.0:6222
      --routes nats://nats-2:6222
      --http_port 8222
    networks:
      - sockudo-network
    mem_limit: 128m
    cpus: '0.25'

  nats-2:
    image: nats:alpine
    ports:
      - "14223:4222"
      - "18223:8222"  # HTTP monitoring
    command: |
      --name nats-2
      --cluster_name NATS
      --cluster nats://0.0.0.0:6222
      --routes nats://nats-1:6222
      --http_port 8222
    networks:
      - sockudo-network
    mem_limit: 128m
    cpus: '0.25'

  # Development MySQL with sample data
  mysql-test:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=root123
      - MYSQL_DATABASE=sockudo
      - MYSQL_INITDB_SKIP_TZINFO=1
    command: --bind-address=0.0.0.0 --default-authentication-plugin=mysql_native_password --innodb-buffer-pool-size=128M --max-connections=50 --performance-schema=OFF
    ports:
      - "13306:3306"
    volumes:
      - mysql-test-data:/var/lib/mysql
      - ./sql/init-sql-docker.sql:/docker-entrypoint-initdb.d/01-init-sql.sql:ro
      - ./sql/init-test.sql:/docker-entrypoint-initdb.d/02-init-test.sql:ro
    networks:
      - sockudo-network
    mem_limit: 512m
    cpus: '0.5'
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-proot123"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

networks:
  sockudo-network:
    driver: bridge

volumes:
  mysql-test-data:
    driver: local